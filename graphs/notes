Types of Graph Representations
-adjacency matrix - 2D representation of values in x, y plane where 1 indicates connections
-adjacency list - index is the node, value is the nodes connections
-edge list - simply shows the connections (what is connected to what)

Edge List Example
const graph = [ [0,2], [2,3], [2,1], [1,3]]

Adjacency List Example
const graph = [[2],[2,3],[0,1,3],[1,2]]
index=(0,1,2,3)

Adjacency Matrix Example
const graph = {

    0 1 2 3
0: [0,0,1,0],
1: [0,0,1,1],
2: [1,1,0,1],
3: [0,1,1,0]
}

Directed Graphs - a graph in which all the edges are uni-directional, the edges point in a single direction.
Undirected Graphs -a graph in which all the edges are bi-directional, the edges do not point in any specific direction, can be cyclic
Weighted Graphs - each edge is assigned a weight, or a cost.
Cyclic graph - a graph that has at least one edge that start from a node and end at the same node. (a directed graph that leads back to itself or an undirected graph with cycles)

An undirected graph is acyclic (i.e., a forest) if a DFS yields no back edges. Since back edges are those edges ( u , v ) connecting a vertex u to an ancestor v in a depth-first tree, so no back edges means there are only tree edges, so there is no cycle. So we can simply run DFS. If find a back edge, there is a cycle.
https://stackoverflow.com/questions/526331/cycles-in-an-undirected-graph#:~:text=An%20undirected%20graph%20is%20acyclic,edge%2C%20there%20is%20a%20cycle.
https://www.tutorialspoint.com/Detect-Cycle-in-a-an-Undirected-Graph
https://medium.com/basecs/spinning-around-in-cycles-with-directed-acyclic-graphs-a233496d4688#:~:text=Both%20directed%20and%20undirected%20graphs,least%20one%20cycle%20in%20it.
https://en.wikipedia.org/wiki/Directed_acyclic_graph

Adjacency List
code comments
#defaultdict takes in a function as an argument. Using the list - constructor
#1 points to 2 (1 => 2), add to list - 2nd function

function will return an array
---begin code---

from collections import defaultdict

class Graph:
  def __init__(self):
    self.graph = defaultdict(list) 
  def insertEdge(self,v1,v2):
     self.graph[v1].append(v2) 
  def printGraph(self):
     for node in self.graph:
       for v in self.graph[node]:
         print(node,"=>",v)

g = Graph()

g.insertEdge(1,5)
g.insertEdge(5,2)
g.insertEdge(2,7)
g.printGraph()



Adjacency Matrix
class Graph:
  def __init__(self,numberOfNodes):
    self.numberOfNodes = numberOfNodes+1
    self.graph = [[0 for x in range(numberOfNodes+1)] 
                   for y in range(numberOfNodes+1)]  
  def withinBounds(self, v1, v2):
    return (v1 >=0 and v1 <= self.numberOfNodes) and (v2 >= 0 and v2 <= self.numberOfNodes)
  def insertEdge(self, v1, v2):
    if(self.withinBounds(v1, v2)):
      self.graph[v1][v2] = 1
  def printGraph(self):
    for i in range(self.numberOfNodes):
      for j in range(len(self.graph[i])):
        if(self.graph[i][j]):
          print(i, "=>", j)

g= Graph(5)

g.insertEdge(1, 2)
g.insertEdge(2, 3)
g.insertEdge(4, 5)
g.printGraph()
